name: Setup action
description: Checkout, setup node and dependencies
inputs:
  turbo-summarize:
    description: 'The token to use for Turbo task summaries'
    required: false
    default: 'false'
  turbo-enabled:
    description: 'Enable Turbo?'
    required: false
    default: 'true'
  turbo-cache:
    description: 'Enable Turborepo caching'
    required: false
    default: 'remote:rw'
  turbo-cache-dir:
    description: 'The cache dir to use for Turbo'
    required: false
    default: './.turbo-cache'
  turbo-signature:
    description: 'The signature to use for Turbo'
    required: false
  turbo-team:
    description: 'The team to use for Turbo remote auth'
    required: true
  turbo-token:
    description: 'The token to use for Turbo remote auth'
    required: true
  registry-url:
    description: 'The registry the packages will be published to'
    required: false
    default: ''
  verbose:
    description: 'Enable verbose output'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
  - name: Configure Turborepo
    id: turbo
    uses: actions/github-script@v7
    env:
      CACHE: ${{ inputs.turbo-cache }}
      CACHE_DIR: ${{ inputs.turbo-cache-dir }}
      ENABLED: ${{ inputs.turbo-enabled }}
      SIGNATURE: ${{ inputs.turbo-signature }}
      TEAM: ${{ inputs.turbo-team }}
      TOKEN: ${{ inputs.turbo-token }}
      SUMMARIZE: ${{ inputs.turbo-summarize }}
      VERBOSE: ${{ inputs.verbose }}
    with:
      script: |
        const os = require('os');
        const cpus = typeof os.availableParallelism === 'function' 
        ? os.availableParallelism() 
        : os.cpus().length;

        const { ENABLED, CACHE = 'remote:rw', CACHE_DIR, SIGNATURE, TEAM, TOKEN, SUMMARIZE, VERBOSE } = process.env;

        const ARGS = [
          `--cache-dir=${CACHE_DIR}`,
          `--concurrency=${cpus}`,
          `--summarize=${SUMMARIZE}`,
        ]

        if (VERBOSE === 'true') {
          ARGS.push('--verbose=2');
          ARGS.push('--log-order=stream');
          ARGS.push('--output-logs=full');
        } else {
          ARGS.push('--output-logs=new-only');
        }

        core.exportVariable('TURBO_ARGS', ARGS.join(' '));

        if (ENABLED === 'true') {
          core.exportVariable('TURBO_CACHE', CACHE)
          core.exportVariable('TURBO_TEAM', TEAM)
          core.exportVariable('TURBO_TOKEN', TOKEN)
        }

        if (SIGNATURE && SIGNATURE !== '') {
          core.exportVariable('TURBO_REMOTE_CACHE_SIGNATURE_KEY', SIGNATURE)
        }

        core.exportVariable('FORCE_COLOR', '1');

  - name: Turbo CLI ARGS
    shell: bash
    run: echo $TURBO_ARGS